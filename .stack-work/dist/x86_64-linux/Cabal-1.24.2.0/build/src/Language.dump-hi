
==================== FINAL INTERFACE ====================
2019-04-25 17:53:03.084454 UTC

interface Haskull-0.1.0.0-BWrHz1hBGVfKvAfsCTzyaC:Language 8002
  interface hash: cebc535ddc107556465c4e907a1d43db
  ABI hash: d5580d8965d96755e7f99c06e55463f6
  export-list hash: 89a957bf29fae31d2d1d3db697110512
  orphan hash: 7004cd23b60d4e2c6540535168434cab
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.haskulldef
  Language.haskullstyle
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec b63ffbcfd32da83683c00215f9c65dae
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Char 261fdcccc6ba24f6960e6d582f789f87
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Language 7c49cd0564312142a61b26e7d1a72031
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Prim cf8fdd65b268b07ee0d4808d85010d49
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Token 43a3c35cde41b2eb307e1fa0e52feb99
99233e835469caa4a55e86aefd6100b4
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  (Language.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream @ tok)
                  (Language.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok) -}
4e059bbf1bfe7befb7d357960ce559ac
  $s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream ::
    GHC.Base.Monad Data.Functor.Identity.Identity
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ tok -> Data.Functor.Identity.$fMonadIdentity) -}
105c7a6f36be25146177be3f3c770bad
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok (ds :: [tok]) ->
                 case ds of wild {
                   []
                   -> GHC.Base.$
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Nothing @ (tok, [tok]))
                   : t ts
                   -> GHC.Base.$
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Just @ (tok, [tok]) (t, ts)) }) -}
2b76373ad55c90ea4cabd54d779ec23d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.$trModule2
                   Language.$trModule1) -}
9ce3329d3423ddafbd47217dffad1782
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Language"#) -}
bb54cfb056175c040aa15ac4cfbc16d9
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Haskull-0.1.0.0-BWrHz1hBGVfKvAfsCTzyaC"#) -}
6efec0f3724657adfe39804e2e7bb8d8
  $whaskullstyle ::
    GHC.Base.String
    -> Text.Parsec.Pos.SourceName
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> st
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 7,
     Strictness: <L,U><L,U><S,U><S,U><S,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ st
                   @ b
                   (ww :: GHC.Base.String)
                   (ww1 :: Text.Parsec.Pos.SourceName)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: st)
                   (w :: GHC.Types.Char
                         -> Text.Parsec.Prim.State GHC.Base.String st
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b)
                   (w1 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Char.$wsatisfy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ st
                   (Language.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Unicode.isAlphaNum
                   @ b
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   w
                   (\ (err :: Text.Parsec.Error.ParseError) ->
                    let {
                      err1 :: Text.Parsec.Error.ParseError
                      = case err of ww5 { Text.Parsec.Error.ParseError ww6 ww7 ->
                        case Text.Parsec.Prim.$wsetExpectErrors
                               ww6
                               ww7
                               Language.haskulldef_msgs of ww8 { (#,#) ww9 ww10 ->
                        Text.Parsec.Error.ParseError ww9 ww10 } }
                    } in
                    Text.Parsec.Char.$wsatisfy
                      @ GHC.Base.String
                      @ Data.Functor.Identity.Identity
                      @ st
                      (Language.$s$fStream[]mtok @ GHC.Types.Char)
                      Language.haskulldef24
                      @ b
                      ww
                      ww1
                      ww2
                      ww3
                      ww4
                      w
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       w1 (Text.Parsec.Error.mergeError err1 err')))) -}
5b123d30cef2d93718d9a1dba9bcf11f
  $whaskullstyle1 ::
    GHC.Base.String
    -> Text.Parsec.Pos.SourceName
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> st
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 9,
     Strictness: <L,U><L,U><S,U><S,U><S,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ st
                   @ b
                   (ww :: GHC.Base.String)
                   (ww1 :: Text.Parsec.Pos.SourceName)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: st)
                   (w :: GHC.Types.Char
                         -> Text.Parsec.Prim.State GHC.Base.String st
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b)
                   (w1 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String st
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 let {
                   ww5 :: Text.Parsec.Pos.SourcePos
                   = Text.Parsec.Pos.SourcePos ww1 ww2 ww3
                 } in
                 let {
                   ww6 :: Text.Parsec.Prim.State GHC.Base.String st
                   = Text.Parsec.Prim.State @ GHC.Base.String @ st ww ww5 ww4
                 } in
                 Text.Parsec.Char.$wsatisfy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ st
                   (Language.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Unicode.isAlpha
                   @ b
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   w
                   (\ (err :: Text.Parsec.Error.ParseError) ->
                    let {
                      err1 :: Text.Parsec.Error.ParseError
                      = case err of ww7 { Text.Parsec.Error.ParseError ww8 ww9 ->
                        case Text.Parsec.Prim.$wsetExpectErrors
                               ww8
                               ww9
                               Language.haskulldef_msgs1 of ww10 { (#,#) ww11 ww12 ->
                        Text.Parsec.Error.ParseError ww11 ww12 } }
                    } in
                    (Language.haskulldef27 @ st)
                      `cast`
                    (Text.Parsec.Prim.N:ParsecT[0]
                         <GHC.Base.String>_R
                         <st>_R
                         <Data.Functor.Identity.Identity>_R
                         <GHC.Types.Char>_R)
                      @ b
                      ww6
                      w
                      w1
                      (\ (y :: GHC.Types.Char)
                         (s' :: Text.Parsec.Prim.State GHC.Base.String st)
                         (err' :: Text.Parsec.Error.ParseError) ->
                       w2 y s' (Text.Parsec.Error.mergeError err1 err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       w3 (Text.Parsec.Error.mergeError err1 err')))) -}
1a0e913c5c97a7a1b9321e1587440c13
  haskulldef ::
    Text.Parsec.Token.GenLanguageDef
      GHC.Base.String u Data.Functor.Identity.Identity
  {- Unfolding: (\ @ u ->
                 Text.Parsec.Token.LanguageDef
                   @ GHC.Base.String
                   @ u
                   @ Data.Functor.Identity.Identity
                   Language.haskulldef31
                   Language.haskulldef30
                   Language.haskulldef29
                   GHC.Types.False
                   (Language.haskulldef26 @ u)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <u>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   (Language.haskulldef23 @ u)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <u>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   (Text.Parsec.Language.emptyDef1 @ u)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <u>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   (Text.Parsec.Language.emptyDef1 @ u)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <u>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   Language.haskulldef13
                   Language.haskulldef1
                   GHC.Types.True) -}
591041fb17343b11009504dd2d2105da
  haskulldef1 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.haskulldef12
                   Language.haskulldef2) -}
cc0b7b42273a9c4d0899e6cebe4a5a7f
  haskulldef10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-"#) -}
da227384235adc74039a42e8a69fa3c8
  haskulldef11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/"#) -}
5d896dc32db48b9ce4f33627956eea5f
  haskulldef12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "+"#) -}
02b7c92fb9f60a57ecf72fcfeb34db6d
  haskulldef13 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.haskulldef22
                   Language.haskulldef14) -}
e64d79ad61ecf995cb1382ea228ecf86
  haskulldef14 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.haskulldef21
                   Language.haskulldef15) -}
767859f25c5745ea6893ac2c58fea7d8
  haskulldef15 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.haskulldef20
                   Language.haskulldef16) -}
5a3e8c109bbe060d5282a871dc5180ce
  haskulldef16 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.haskulldef19
                   Language.haskulldef17) -}
51b2790d0fcaea15e15dbc151f08ed14
  haskulldef17 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.haskulldef18
                   (GHC.Types.[] @ GHC.Base.String)) -}
2fc8a32f9140dd6a847842061ef270ee
  haskulldef18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "string"#) -}
906cd1fcd1f652b126d3762e135b8f35
  haskulldef19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "extern"#) -}
83065ecb5e4e59254a5270aba1f09f47
  haskulldef2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.haskulldef11
                   Language.haskulldef3) -}
d48e27da304f323e2247609da573441f
  haskulldef20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "def"#) -}
4dc4332725b297b1a8c2e9c0a53018bd
  haskulldef21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "char"#) -}
422d72ff1997829e997f4336397107ae
  haskulldef22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "int"#) -}
687b111a5aee481bca184e109215e089
  haskulldef23 ::
    Text.Parsec.Prim.State GHC.Base.String st
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,A><L,C(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ st
                   @ b
                   (w :: Text.Parsec.Prim.State GHC.Base.String st)
                   (w1 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String st
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String st
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 case w of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Language.$whaskullstyle @ st @ b ww1 ww5 ww6 ww7 ww3 w1 w4 } }) -}
72ebcea8051b24bd0c4d45c01d52ab04
  haskulldef24 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1,
     Unfolding: (\ (c :: GHC.Types.Char) ->
                 GHC.List.elem
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   c
                   Language.haskulldef25) -}
23881513f77acb4be99e245d00f66bb8
  haskulldef25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_'"#) -}
ce5a2c767d3674cadb48966ab7a4b130
  haskulldef26 ::
    Text.Parsec.Prim.State GHC.Base.String st
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),1*U(U,U(U,U,U),U)><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ st
                   @ b
                   (w :: Text.Parsec.Prim.State GHC.Base.String st)
                   (w1 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String st
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String st
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 case w of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Language.$whaskullstyle1
                   @ st
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w1
                   w2
                   w3
                   w4 } }) -}
82379a8301fb31d5bed2c144532702dc
  haskulldef27 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String st Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (\ @ st ->
                 Text.Parsec.Char.char
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ st
                   (Language.$s$fStream[]mtok @ GHC.Types.Char)
                   Language.haskulldef28) -}
69ffe16ca16d6bb4ca343b9d5388b229
  haskulldef28 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# '_'#) -}
27fa8aaeddea44eb7f78819252e6ba75
  haskulldef29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "//"#) -}
89ba4f64898d222002d97c22c921f866
  haskulldef3 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.haskulldef10
                   Language.haskulldef4) -}
48156f842e650308582f6c8cef0e2bd5
  haskulldef30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-}"#) -}
d61dd3fad3fb07c4290de829b68347e8
  haskulldef31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "{-"#) -}
e87525b2739739eb53a88719ffdc759f
  haskulldef4 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.haskulldef9
                   Language.haskulldef5) -}
000be76b332019856238f6bc3486e292
  haskulldef5 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.haskulldef8
                   Language.haskulldef6) -}
5fd754e02fa1d9ebf063b3e013807fd9
  haskulldef6 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.haskulldef7
                   (GHC.Types.[] @ GHC.Base.String)) -}
933f4ad37c3380f5ada130fad3868e43
  haskulldef7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "="#) -}
a477609d9539e006e315ca69869fb674
  haskulldef8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ";"#) -}
5d04cc26f3b2bb4d0635f421bcd5c9c8
  haskulldef9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "*"#) -}
127e73de348c0ec48c5aeab98c602a7c
  haskulldef_msgs :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Text.Parsec.Char.alphaNum2
                   (GHC.Types.[] @ GHC.Base.String)) -}
495428e98a7916bce7c5a64830d74971
  haskulldef_msgs1 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Text.Parsec.Char.letter2
                   (GHC.Types.[] @ GHC.Base.String)) -}
9e956e29348677b64ad148df751ba50a
  haskullstyle :: Text.Parsec.Token.LanguageDef st
  {- Unfolding: (\ @ st ->
                 Text.Parsec.Token.LanguageDef
                   @ GHC.Base.String
                   @ st
                   @ Data.Functor.Identity.Identity
                   Language.haskulldef31
                   Language.haskulldef30
                   Language.haskulldef29
                   GHC.Types.False
                   (Language.haskulldef26 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   (Language.haskulldef23 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   (Text.Parsec.Language.emptyDef1 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   (Text.Parsec.Language.emptyDef1 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   (GHC.Types.[] @ GHC.Base.String)
                   (GHC.Types.[] @ GHC.Base.String)
                   GHC.Types.True) -}
"SPEC/Language $fStream[]mtok @ Identity _" [ALWAYS] forall @ tok
                                                            ($dMonad :: GHC.Base.Monad
                                                                          Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok @ Data.Functor.Identity.Identity
                                  @ tok
                                  $dMonad
  = Language.$s$fStream[]mtok @ tok
"SPEC/Language $fStream[]mtok_$cp1Stream @ Identity _" [ALWAYS] forall @ tok
                                                                       ($dMonad :: GHC.Base.Monad
                                                                                     Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cp1Stream @ Data.Functor.Identity.Identity
                                             @ tok
                                             $dMonad
  = Language.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream @ tok
"SPEC/Language $fStream[]mtok_$cuncons @ Identity _" [ALWAYS] forall @ tok
                                                                     ($dMonad :: GHC.Base.Monad
                                                                                   Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ Data.Functor.Identity.Identity
                                           @ tok
                                           $dMonad
  = Language.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

